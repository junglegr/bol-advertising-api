<?php

namespace Coralion\BolAdvertisingV7;

// This class is auto generated by OpenApi\ClientGenerator
class Client extends BaseClient
{

    /**
     * Gets a list of all products that the advertiser is selling on the bol.com platform and that are available for
     * advertising.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\Assortment[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getAssortments(?int $page = 1): array
    {
        $url = "r/assortments";
        $options = [
            'query' => [
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\Assortments::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->products;
    }

    /**
     * Gets the performance results of an ad group for the period requested. The results are aggregated per day.
     * @param string $adGroupId The identifier of the ad group.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\AdGroupPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getAdGroupPerformance(string $adGroupId, string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/ad-group-performance/${adGroupId}";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\AdGroupPerformanceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->adGroupPerformance;
    }

    /**
     * Gets a paginated list of all ad groups that are present within a campaign.
     * @param string $campaignId Unique identifier for the campaign.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\AdGroup[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getAdGroups(string $campaignId, ?int $page = 1): array
    {
        $url = "r/sponsored-products/ad-groups";
        $options = [
            'query' => [
                'campaign-id' => $campaignId,
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\AdGroupsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->adGroups;
    }

    /**
     * Creates an ad group.
     * @param Model\CreateAdGroupRequest $createAdGroupRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postAdGroup(Model\CreateAdGroupRequest $createAdGroupRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/ad-groups";
        $options = [
            'body' => $createAdGroupRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of an ad group.
     * @param string $adGroupId The identifier of the ad group.
     * @return Model\AdGroup[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getAdGroupById(string $adGroupId): array
    {
        $url = "r/sponsored-products/ad-groups/${adGroupId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\AdGroupsResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->adGroups;
    }

    /**
     * Updates an ad group.
     * @param string $adGroupId The identifier of the ad group.
     * @param Model\UpdateAdGroupRequest $updateAdGroupRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putAdGroups(string $adGroupId, Model\UpdateAdGroupRequest $updateAdGroupRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/ad-groups/${adGroupId}";
        $options = [
            'body' => $updateAdGroupRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets the advertiser performance results for the period requested. The results are aggregated per day.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\AdvertiserPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getAdvertiserPerformance(string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/advertiser-performance";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\AdvertiserPerformanceResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->advertiserPerformance;
    }

    /**
     * Gets the performance results of a campaign for the period requested. The results are aggregated per day.
     * @param string $campaignId Unique identifier for the campaign.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\CampaignPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCampaignPerformance(string $campaignId, string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/campaign-performance/${campaignId}";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\CampaignPerformanceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->campaignPerformance;
    }

    /**
     * Gets a paginated list of all campaigns for an advertiser.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\SingleCampaignResponse[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCampaigns(?int $page = 1): array
    {
        $url = "r/sponsored-products/campaigns";
        $options = [
            'query' => [
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\CampaignsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->campaigns;
    }

    /**
     * Creates a campaign.
     * @param Model\CreateCampaignRequest $createCampaignRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postCampaign(Model\CreateCampaignRequest $createCampaignRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/campaigns";
        $options = [
            'body' => $createCampaignRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of a campaign.
     * @param string $campaignId Unique identifier for the campaign.
     * @return Model\SingleCampaignResponse|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getCampaign(string $campaignId): ?Model\SingleCampaignResponse
    {
        $url = "r/sponsored-products/campaigns/${campaignId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\SingleCampaignResponse::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Updates a campaign.
     * @param string $campaignId Unique identifier for the campaign.
     * @param Model\UpdateCampaignRequest $updateCampaignRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putCampaign(string $campaignId, Model\UpdateCampaignRequest $updateCampaignRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/campaigns/${campaignId}";
        $options = [
            'body' => $updateCampaignRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Gets the performance results of all keywords within an ad group for the period requested. The results are
     * returned per keyword and are aggregated to the period requested.
     * @param string $adGroupId The identifier of the ad group.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\KeywordPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getKeywordPerformance(string $adGroupId, string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/keyword-performance/${adGroupId}";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\KeywordPerformanceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->keywordPerformance;
    }

    /**
     * Gets a paginated list of all keywords that are present within an ad group.
     * @param string $adGroupId The identifier of the parent ad group.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\Keyword[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getKeywords(string $adGroupId, ?int $page = 1): array
    {
        $url = "r/sponsored-products/keywords";
        $options = [
            'query' => [
                'ad-group-id' => $adGroupId,
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\KeywordsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->keywords;
    }

    /**
     * Creates a keyword and adds it to an ad group.
     * @param Model\CreateKeywordRequest $createKeywordRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function createKeyword(Model\CreateKeywordRequest $createKeywordRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/keywords";
        $options = [
            'body' => $createKeywordRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of a keyword.
     * @param string $keywordId The identifier of the keyword.
     * @return Model\Keyword
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getKeyword(string $keywordId): Model\Keyword
    {
        $url = "r/sponsored-products/keywords/${keywordId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\Keyword::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Updates a keyword.
     * @param string $keywordId The identifier of the keyword.
     * @param float $bid
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function putKeyword(string $keywordId, float $bid): Model\ProcessStatus
    {
        $url = "r/sponsored-products/keywords/${keywordId}";
        $options = [
            'body' => Model\UpdateKeywordRequest::constructFromArray(['bid' => $bid]),
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }

    /**
     * Deletes a single keyword.
     * @param string $keywordId The identifier of the keyword.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deleteKeyword(string $keywordId): Model\ProcessStatus
    {
        $url = "r/sponsored-products/keywords/${keywordId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Gets a paginated list of all negative keywords that are present within an ad group.
     * @param string $adGroupId The identifier of the parent ad group.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\NegativeKeyword[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getNegativeKeywords(string $adGroupId, ?int $page = 1): array
    {
        $url = "r/sponsored-products/negative-keywords";
        $options = [
            'query' => [
                'ad-group-id' => $adGroupId,
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\NegativeKeywordsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->negativeKeywords;
    }

    /**
     * Creates a negative keyword and adds it to an ad group.
     * @param Model\CreateNegativeKeywordRequest $createNegativeKeywordRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postNegativeKeyword(Model\CreateNegativeKeywordRequest $createNegativeKeywordRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/negative-keywords";
        $options = [
            'body' => $createNegativeKeywordRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of a negative keywords.
     * @param string $keywordId The identifier of the negative keyword.
     * @return Model\NegativeKeyword|null
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getNegativeKeyword(string $keywordId): ?Model\NegativeKeyword
    {
        $url = "r/sponsored-products/negative-keywords/${keywordId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\NegativeKeyword::class,
            '404' => 'null',
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Deletes a negative keyword.
     * @param string $keywordId The identifier of the negative keyword.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function deleteNegativeKeyword(string $keywordId): Model\ProcessStatus
    {
        $url = "r/sponsored-products/negative-keywords/${keywordId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('DELETE', $url, $options, $responseTypes);
    }

    /**
     * Gets the performance results of all target products within an ad group for the period requested. The results are
     * returned per target product and are aggregated to the period requested.
     * @param string $adGroupId The identifier of the ad group.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\ProductPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getProductPerformance(string $adGroupId, string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/product-performance/${adGroupId}";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\ProductPerformanceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->productPerformance;
    }

    /**
     * Gets the performance results of all search terms within an ad group for the period requested. The results are
     * returned per search term and are aggregated to the period requested.
     * @param string $adGroupId The identifier of the ad group.
     * @param string $startDate The start date for the reporting period. Period start date in ISO 8601 standard.
     * @param string $endDate The end date for the reporting period. This will be one day after the last full day that
     * is included in the reporting. Period end date in ISO 8601 standard.
     * @return Model\SearchTermPerformance[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getSearchTermPerformance(string $adGroupId, string $startDate, string $endDate): array
    {
        $url = "r/sponsored-products/search-term-performance/${adGroupId}";
        $options = [
            'query' => [
                'start-date' => $startDate,
                'end-date' => $endDate,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\SearchTermPerformanceResponse::class,
            '404' => 'null',
        ];

        $result = $this->request('GET', $url, $options, $responseTypes);
        return $result === null ? [] : $result->searchTermPerformance;
    }

    /**
     * Gets a paginated list of all target products that are present within an ad group.
     * @param string $adGroupId The identifier of the parent ad group.
     * @param int|null $page The requested page number with a page size of 50 items.
     * @return Model\TargetProduct[]
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getTargetProducts(string $adGroupId, ?int $page = 1): array
    {
        $url = "r/sponsored-products/target-products";
        $options = [
            'query' => [
                'ad-group-id' => $adGroupId,
                'page' => $page,
            ],
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\TargetProductsResponse::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes)->targetProducts;
    }

    /**
     * Creates a target product and adds it to an ad group.
     * @param Model\CreateTargetProductRequest $createTargetProductRequest
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function postTargetProducts(Model\CreateTargetProductRequest $createTargetProductRequest): Model\ProcessStatus
    {
        $url = "r/sponsored-products/target-products";
        $options = [
            'body' => $createTargetProductRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('POST', $url, $options, $responseTypes);
    }

    /**
     * Gets the details of a target product.
     * @param string $targetProductId The identifier of the target product.
     * @return Model\TargetProduct
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function getTargetProduct(string $targetProductId): Model\TargetProduct
    {
        $url = "r/sponsored-products/target-products/${targetProductId}";
        $options = [
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '200' => Model\TargetProduct::class,
        ];

        return $this->request('GET', $url, $options, $responseTypes);
    }

    /**
     * Updates a target product.
     * @param Model\UpdateTargetProductRequest $updateTargetProductRequest
     * @param string $targetProductId The identifier of the target product.
     * @return Model\ProcessStatus
     * @throws Exception\ConnectException when an error occurred in the HTTP connection.
     * @throws Exception\ResponseException when an unexpected response was received.
     * @throws Exception\UnauthorizedException when the request was unauthorized.
     * @throws Exception\RateLimitException when the throttling limit has been reached for the API user.
     * @throws Exception\Exception when something unexpected went wrong.
     */
    public function updateTargetProduct(Model\UpdateTargetProductRequest $updateTargetProductRequest, string $targetProductId): Model\ProcessStatus
    {
        $url = "r/sponsored-products/target-products/${targetProductId}";
        $options = [
            'body' => $updateTargetProductRequest,
            'produces' => 'application/vnd.advertiser.v7+json',
        ];
        $responseTypes = [
            '202' => Model\ProcessStatus::class,
        ];

        return $this->request('PUT', $url, $options, $responseTypes);
    }
}
